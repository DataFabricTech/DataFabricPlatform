{
  "$id": "https://mobigen.com/schema/entity/services/databaseService.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Database Service",
  "description": "This schema defines the `Database Service` is a service such as MySQL, BigQuery, Redshift, Postgres, or Snowflake. Alternative terms such as Database Cluster, Database Server instance are also used for database service.",
  "type": "object",
  "javaType": "com.mobigen.vdap.schema.entity.services.DatabaseService",
  "definitions": {
    "databaseServiceType": {
      "description": "Type of database service such as MySQL, BigQuery, Snowflake, Redshift, Postgres...",
      "type": "string",
      "enum": [
        "Mysql",
        "Postgres",
        "Mssql",
        "Oracle",
        "Hive",
        "Trino",
        "MariaDB",
        "SQLite",
        "MongoDB"
      ],
      "javaEnums": [
        {
          "name": "Mysql"
        },
        {
          "name": "Postgres"
        },
        {
          "name": "Mssql"
        },
        {
          "name": "Oracle"
        },
        {
          "name": "Hive"
        },
        {
          "name": "Trino"
        },
        {
          "name": "MariaDB"
        },
        {
          "name": "SQLite"
        },
        {
          "name": "MongoDB"
        }
      ]
    },
    "databaseConnection": {
      "type": "object",
      "description": "Database Connection.",
      "properties": {
        "config": {
          "mask": true,
          "oneOf": [
            {
              "$ref": "./connections/database/hiveConnection.json"
            },
            {
              "$ref": "./connections/database/mariaDBConnection.json"
            },
            {
              "$ref": "./connections/database/mssqlConnection.json"
            },
            {
              "$ref": "./connections/database/mysqlConnection.json"
            },
            {
              "$ref": "./connections/database/sqliteConnection.json"
            },
            {
              "$ref": "./connections/database/oracleConnection.json"
            },
            {
              "$ref": "./connections/database/postgresConnection.json"
            },
            {
              "$ref": "./connections/database/trinoConnection.json"
            },
            {
              "$ref": "./connections/database/mongoDBConnection.json"
            }
          ]
        }
      },
      "additionalProperties": false
    }
  },
  "properties": {
    "id": {
      "description": "Unique identifier of this database service instance.",
      "$ref": "../../type/basic.json#/definitions/uuid"
    },
    "name": {
      "description": "Name that identifies this database service.",
      "$ref": "../../type/basic.json#/definitions/entityName"
    },
    "displayName": {
      "description": "Display Name that identifies this database service.",
      "type": "string"
    },
    "serviceType": {
      "description": "Type of database service such as MySQL, BigQuery, Snowflake, Redshift, Postgres...",
      "$ref": "#/definitions/databaseServiceType"
    },
    "description": {
      "description": "Description of a database service instance.",
      "$ref": "../../type/basic.json#/definitions/markdown"
    },
    "connection": {
      "$ref": "#/definitions/databaseConnection"
    },
    "pipelines": {
      "description": "References to pipelines deployed for this database service to extract metadata, usage, lineage etc..",
      "$ref": "../../type/entityReferenceList.json"
    },
    "testConnectionResult": {
      "description": "Last test connection results for this service",
      "$ref": "connections/testConnectionResult.json"
    },
    "tags": {
      "description": "Tags for this Database Service.",
      "type": "array",
      "items": {
        "$ref": "../../type/tagLabel.json"
      },
      "default": []
    },
    "version": {
      "description": "Metadata version of the entity.",
      "$ref": "../../type/entityHistory.json#/definitions/entityVersion"
    },
    "updatedAt": {
      "description": "Last update time corresponding to the new version of the entity in Unix epoch time milliseconds.",
      "$ref": "../../type/basic.json#/definitions/timestamp"
    },
    "updatedBy": {
      "description": "User who made the update.",
      "type": "string"
    },
    "owners": {
      "description": "Owners of this database service.",
      "$ref": "../../type/entityReferenceList.json"
    },
    "href": {
      "description": "Link to the resource corresponding to this database service.",
      "$ref": "../../type/basic.json#/definitions/href"
    },
    "changeDescription": {
      "description": "Change that lead to this version of the entity.",
      "$ref": "../../type/entityHistory.json#/definitions/changeDescription"
    },
    "deleted": {
      "description": "When `true` indicates the entity has been soft deleted.",
      "type": "boolean",
      "default": false
    }
  },
  "required": ["id", "name", "serviceType"],
  "additionalProperties": false
}
