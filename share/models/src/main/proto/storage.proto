syntax = "proto3";

package com.mobigen.datafabric.share.protobuf;
option go_package = "github.com/mobigen/datafabric/protobuf";

import "google/protobuf/empty.proto";

import "storage-common.proto";
import "utilities.proto";
import "user.proto";
import "data-catalog.proto";

// Storage
service StorageService {
  // Storage Browser : 원천 데이터 저장소 탐색기
  // GET    : /storage/v1/overview
  rpc Overview(google.protobuf.Empty) returns (ResStorageOverview);
  // POST   : /storage/v1/search
  rpc Search(ReqStorageSearch) returns (ResStorages);
  // POST   : /storage/v1/status
  rpc Status(ReqId) returns (ResStorage);
  // POST   : /storage/v1/default
  rpc Default(ReqId) returns (ResStorage);
  // POST   : /storage/v1/advanced
  rpc Advanced(ReqId) returns (ResStorage);
  // POST   : /storage/v1/browse
  rpc Browse(ReqStorageBrowse) returns (ResStorageBrowse);
  // POST   : /storage/v1/browse/default
  rpc BrowseDefault(ReqStorageBrowse) returns (ResStorageBrowseDefault);

  // Storage Management : 원천 데이터 저장소 정보 추가/수정/삭제
  // 연결정보 추가를 위한 과정 중 StorageType, Adaptor 관련은 AdaptorService 에서 처리
  // POST   : /storage/v1/connect-test
  rpc ConnectTest(ConnInfo) returns (CommonResponse);         // 연결 테스트 - Dest 원천 데이터 저장소
  // POST   : /storage/v1/add
  rpc AddStorage(Storage) returns (CommonResponse);           // 원천 데이터 저장소 추가
  // POST   : /storage/v1/modify
  rpc UpdateStorage(Storage) returns (CommonResponse);        // 원천 데이터 저장소 수정
  // GET    : /storage/v1/connected-data/{storage-id}
  rpc ConnectedData(ReqId) returns (ResConnectedData);        // 저장소 연결 데이터 수 확인
  // POST   : /storage/v1/delete
  rpc DeleteStorage(ReqId) returns (CommonResponse);          // 원천 데이터 저장소 삭제
}

// ConnInfo 원천 데이터 저장소 연결 테스트용 데이터
message ConnInfo {
  string adaptorId = 1;
  repeated InputField basicOptions = 2;
  repeated InputField advancedOptions = 3;
  string url_format = 4;
}

// Storage 원천 데이터 저장소 정보 - 기본 정보와 연결 정보, 메타 데이터, 설정 등을 포함
message Storage {
  string id = 1;
  string name = 2;
  string description = 3;
  repeated Meta systemMeta = 4;
  repeated Meta userMeta = 5;
  repeated string tags = 6;
  string storageType = 7;
  string adaptorId = 8;
  repeated InputField basicOptions = 9;
  repeated InputField additionalOptions = 10;
  StorageSetting settings = 11;
  Status status = 12;
  StorageStatistics statistics = 13;
  repeated DataCatalogStatistics dataStatistics = 14;

  repeated StorageHistory history = 16;
  repeated StorageEvent event = 17;
  User createdBy = 18;
  DateTime createdAt = 19;
  User lastModifiedBy = 20;
  DateTime lastModifiedAt = 21;

  string url = 22;
}

// StorageSetting 원천 데이터 저장소의 고급(수집) 설정 정보
message StorageSetting {
  AutoAddSetting autoAddSetting = 1;
  SyncSetting syncSetting = 2;
  MonitoringSetting monitoringSetting = 3;
}

// AutoAddSetting 원천 데이터 저장소에서 자동으로 데이터를 추가하기 위한 설정 정보
message AutoAddSetting {
  bool enable = 1;
  message AutoAddSettingOption {
    string regex = 1;
    string dataType = 2;
    string dataFormat = 3;
    int32 minSize = 4;
    int32 maxSize = 5;
    string startDate = 6;
    string endDate = 7;
  }
  repeated AutoAddSettingOption options = 2;
}

// SyncSetting 원천 데이터 저장소의 데이터와 가상화된 데이터들간 동기화(메타 데이터 업데이트) 설정
message SyncSetting {
  bool enable = 1;
  int32 syncType = 2;
  int32 period = 3;
  int32 week = 4;
  string runTime = 5;
}

// MonitoringProtocol 원천 데이터 저장소와 연결 상태를 점검하는 프로토콜 종류
enum MonitoringProtocol {
  TCP = 0;
  UDP = 1;
  ICMP = 2;
  SQL = 3;
}

// MonitoringSetting 원천 데이터 저장소와 연결 상태 점검 설정
message MonitoringSetting {
  bool enable = 1;
  MonitoringProtocol protocol = 2;
  string host = 3;
  string port = 4;
  string sql = 5;
  int32 period = 6;
  int32 timeout = 7;
  int32 successThreshold = 8;
  int32 failThreshold = 9;
}

// StorageStatistics 사용자 이벤트(검색, 조회, 데이터 조회)에 따른 저장소의 통계 정보
// 단위(5분, 1시간, 6시간, 1일), 누적치 데이터 정보 모두 사용할 수 있도록 long(64bit)을 활용하여 데이터 정의
message StorageStatistics {
  string time = 1;
  string id = 2;
  string name = 3;

  int64 access = 4;
  int64 totalData = 5;
  int64 registeredData = 6;
  double avgResponseTime = 7;
}

// StorageModifiedInfo 저장소 정보 변경 추적용 데이터 정의
message StorageModifiedInfo {
  enum Cmd {
    CREATE = 0;
    UPDATE = 1;
    DELETE = 2;
  }
  Cmd cmd = 1;
  string key = 2;
  string oldValue = 3;
  string newValue = 4;
}

// StorageHistory 저장소 정보 변경 기록
message StorageHistory {
  DateTime time = 1;
  string id = 2;
  string name = 3;
  User modifiedBy = 4;
  repeated StorageModifiedInfo modifiedInfos = 5;
}

// StorageEvent 저장소 이벤트(연결, 끊김, 에러, 동기화)
message StorageEvent {
  DateTime time = 1;
  string id = 2;
  string name = 3;
  Status eventType = 4;
  string description = 5;
}

// ResConnectedData 저장소와 연결된 데이터 정보
message ResConnectedData {
  string code = 1;
  string errMsg = 2;
  message Data {
    int32 connectedDataCount = 1;
    int32 correlationDataCount = 2;
  }
  Data data = 3;
}

// ReqStorageSearch 원천 데이터 저장소 필터링
message StorageSearchFilter {
  string name = 1;
  repeated string storageType = 2;
  repeated Status status = 3;
}

// ReqStorageSearch 원천 데이터 저장소 연결 정보 조회 요청 메시지
message ReqStorageSearch {
  StorageSearchFilter filter = 1;
  repeated Sort sorts = 2;
}

// ResStorages 저장소 여러개 정보 전달
message ResStorages {
  string code = 1;
  string errMsg = 2;
  message Data {
    repeated  Storage storages = 1;
  }
  Data data = 3;
}

// ResStorage 저장소 정보 전달(상태, 기본, 상세(수집정보)
message ResStorage {
  string code = 1;
  string errMsg = 2;
  message Data {
    Storage storage = 1;
  }
  Data data = 3;
}

// ReqStorageBrowse 저장소 내부 탐색을 위한 요청 메시지
message ReqStorageBrowse {
  string id = 1;
  string path = 2;
  int32 depth = 3;
  string name = 4;
}

// ResStorageBrowse 저장소 내부 탐색을 위한 응답 메시지
message ResStorageBrowse {
  string code = 1;
  string errMsg = 2;
  message Data {
    StorageBrowse storageBrowse = 1;
  }
  Data data = 3;
}

// StorageBrowse  데이터 저장소 내 데이터 탐색 정보
message StorageBrowse {
  string id = 1;                          // 데이터 저장소 아이디
  string path = 2;                        // 탐색 요청 경로
  repeated StorageBrowseData data = 3;    // 하위 데이터 정보
}

// StorageBrowseData 원천 데이터 저장소 내 데이터 정보(트리 형태 화면 출력 용)
message StorageBrowseData {
  string name = 1;
  int32 type = 2;
  string dataFormat = 3;
  int32 status = 4;
  repeated StorageBrowseData children = 5;
}

// ResStorageBrowseDefault 원천 데이터 저장소 내 데이터의 기본 정보
message ResStorageBrowseDefault {
  string code = 1;
  string errMsg = 2;
  message Data {
    StorageBrowseDefault dataDefaultInfo = 1;
  }
  Data data = 3;
}

// StorageBrowseDefault 원천 데이터 저장소 내 데이터의 기본 정보
message StorageBrowseDefault {
  string storageId = 1;                       // 저장소 아이디
  string path = 2;                            // 데이터 경로
  string name = 3;                            // 데이터 이름
  string dataFormat = 4;                      // 데이터 종류
  int32 status = 5;                           // 데이터 등록 상태
  message DataInfo {
    int32 rows = 1;                           // 데이터 행 수
    int32 columns = 2;                        // 데이터 열 수
    int32 size = 3;                           // 데이터 크기
    string owner = 4;                         // 데이터 소유자
    string description = 5;                   // 데이터 설명
    DateTime createdAt = 6;                   // 데이터 생성 시간
    DateTime lastModifiedAt = 7;              // 데이터 수정 시간
  }
  DataInfo dataInfo = 6;
  int32 connectedDataCount = 7;               // 연결된 데이터 수
  repeated DataCatalog connectedData = 8;     // 연결된 데이터
  repeated DataStructure dataStructure = 9;   // 데이터 구조
}

// ResStorageOverview 시스템의 전체적인 정보 전달
message ResStorageOverview {
  string code = 1;
  string errMsg = 2;
  message Data {
    repeated StorageTypeCount storageTypeCount = 1;
    repeated StorageStatusCount storageStatusCount = 2;
    repeated StorageStatistics storageStatistics = 3;
    repeated StorageDataCount storageDataCount = 4;
    repeated StorageResponseTime storageResponseTime = 5;
    repeated StorageHistory history = 6;
    repeated StorageEvent event = 7;
  }
  Data data = 3;
}

// StorageTypeCount 저장소 종류(타입) 별 개수
message StorageTypeCount {
  string storageType = 1;     // 저장소 유형
  int32 count = 2;            // 개수
}

// StorageStatusCount 저장소 연결 상태 별 개수
message StorageStatusCount {
  int32 status = 1;           // 저장소의 연결 상태
  int32 count = 2;            // 개수
}

// StorageDataCount 저장소 별 데이터 수(전체 데이터 / 시스템에 등록된 데이터)
message StorageDataCount {
  string id = 1;
  string name = 2;
  int32 total = 3;
  int32 registered = 4;
}

// StorageResponseTime 저장소 별 응답 시간
message StorageResponseTime {
  string id = 1;
  string name = 2;
  double time = 3;
}